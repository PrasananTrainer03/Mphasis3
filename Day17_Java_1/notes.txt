1) What is the Default package in java

	java.lang

2) What is the top level class in java 

	java.lang.Object

Object is the top level class in java, and Object class will have various
methods as

	(i) hashCode() : Displays memory location address number. 

	(ii) toString() : This method will be called automatically, once you print the object. 


Boxing and Unboxing : 
_____________________

The concept of converting value types to reference type known as boxing, 
and reference type to value type known as unboxing. 

Object is type, that which can be used for boxing and unboxing. 

int x;

x=12.5;
x=12
x="Hello";

Object x;
x=12.5
x=12;
x="Hello";

Method Overloading : 
____________________

the concept of using the same method name w.r.t. Different data types or different parameters known as
method overloading. Here, the method name must be same, but no.of parameters or type of parameters we are using are different. 

class Demo {
 int a,b;
 a=5;
 b=7;
}

The above code will throw compile time error, as in class code to be written in method, so if you want to give default values to the member variables, then we need the help of Constructors. 

Constructors are used to initilize the member variable of the class. It is special because it has the same name as that of class name. 

Rules : 
_______

	-> It will not contains any return type

	-> It will not return any value

	-> It will be invoked automatically once the instance of the class created

	-> A constructor can be overloaded. 


What are the types of constructors : 
____________________________________

There are 2 types of constructors known as

	(i) static constructor

		These are called class constructors, which are used to initialize static variables of the class, these constructors are invoked automatically before control reaches the entry point. These constructors will not be overloaded. 

	*** In java, we don't have any static constructors, as static { } itself acts as static constructor ***

	(ii) instance constructor 

		These are the constructors that which are invoked automatically once the instance of the class
created. These constructors can be overloaded. 

static variables : 
__________________

These are the variables, that which retains values irrespective of type of objects. 

static methods : 
__________________

These are the methods, that which are to be called by using class name. No Object required to call these methods. 

Inheritance : 

The concept of deriving a new class from already existing class, known as inheritance, the class which derived known as derived class, the class from which its derived known as base class. 

Through inheritane,  we can reduce the size of the program. 

class First {
...
...
...
}

class Second extends First {
...
...
...
}

Once you create an object to Second class, then you can access all publi/protected and friendly members of base class. 


super keyword : 

if you want to pass values from derived class to base class, then we need the help of super keyword. 

It has 2 forms as

1) Super as a keyword

2) super as a constructor : If you want to pass values from derived class to base class, then we need
the help of super constructor. 

Abstract Class : 
________________

A class, that which can be created, but not implemented and instantiated
known as abstract class. Abstract class contains abstract and non-abstract
methods, abstract methods needs to be overrided mandetorily by the derived 
class. 

Interface : 
____________

Java does not support the concept of multiple inheritance, to achieve this 
we need the help of interfaces. 

An interface contains method declaration, and the implementation can be done
in the corresponding class.  You can add more than one interface to the particular class. 

Difference between interface and Abstract Class : 
____________________________________________________


(i) An abstract class contains both abstract and non-abstract methods, where interface contains 
	only abstract methods.

(ii) interface methods are public and abstract by default. 

(iii) Multiple Inheritance can be achieved by using interfaces

(iv) An interface can be called from anywhere to anywhere. 

When to Use Interface and When to use Abstract class ???


Abstract class used to represent hierarchical data, where interface can be used for specialization. 


Final classes

	Cannot be inherited

Final methods
	cannot be overrided

final variables cannot be changed













































	